// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShepherdsPies.Data;

#nullable disable

namespace ShepherdsPies.Migrations
{
    [DbContext(typeof(ShepherdsPiesDbContext))]
    partial class ShepherdsPiesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cheese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cheeses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Buffalo Mozzarella"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Four Cheese"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None (cheeseless)"
                        });
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            Name = "John Doe",
                            OrderId = 1,
                            PhoneNumber = "555-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            Name = "Jane Smith",
                            OrderId = 2,
                            PhoneNumber = "555-987-6543"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Oak Lane",
                            Name = "Bob Johnson",
                            OrderId = 3,
                            PhoneNumber = "555-234-5678"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Birch Road",
                            Name = "Alice Brown",
                            OrderId = 4,
                            PhoneNumber = "555-876-5432"
                        },
                        new
                        {
                            Id = 5,
                            Address = "527 Main Street",
                            Name = "Tamara Goins",
                            OrderId = 5,
                            PhoneNumber = "555-257-2858"
                        },
                        new
                        {
                            Id = 6,
                            Address = "286 Ocean Avenue",
                            Name = "Amy Jaekel",
                            OrderId = 6,
                            PhoneNumber = "555-573-5468"
                        },
                        new
                        {
                            Id = 7,
                            Address = "25 1st Avenue",
                            Name = "Tamara Goins",
                            OrderId = 7,
                            PhoneNumber = "555-825-8275"
                        },
                        new
                        {
                            Id = 8,
                            Address = "98 Fake Street",
                            Name = "Joey Holland",
                            OrderId = 8,
                            PhoneNumber = "555-292-2260"
                        },
                        new
                        {
                            Id = 9,
                            Address = "82 Baker Lane",
                            Name = "Jeff Gribble",
                            OrderId = 9,
                            PhoneNumber = "555-885-8820"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            ConcurrencyStamp = "8963bb06-1059-4cb6-afb1-ed28df713223",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            ConcurrencyStamp = "764017eb-68b3-4eb2-9c7e-5c4bc363458d",
                            Name = "Courtney",
                            NormalizedName = "courtney"
                        },
                        new
                        {
                            Id = "4720b947-07cb-4dff-8c96-dfc5dba209d8",
                            ConcurrencyStamp = "4c42fad9-bef1-4698-bad8-977465e5188d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff905e18-090b-4d7b-b685-e4e99121b3eb",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAENfafNZWOhENHLF8qVdnBps94NDTrNI8vlpzWP9DmvN106bL1ZQattDaXkcmBkJPrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c55bc310-e817-46d6-8b38-4cebed20f478",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f773cdb4-d766-43f5-82d8-7b0a2984dd4f",
                            Email = "courtney@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEF8+etH0O1adMHS0mpa8BgDYtpoFL4F5cVV1JmUO0omCsGjGYLAViYP03A3rBRYjKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7c2f4aa-3efa-429b-95d3-ec0a8ba0bd2d",
                            TwoFactorEnabled = false,
                            UserName = "Courtney"
                        },
                        new
                        {
                            Id = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1845aff6-af09-41e9-9e7e-179a97a47634",
                            Email = "jeremy@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEG9Xh0C1i/U+tGX2rwPkwf4B2HYwwVOiOdYpLug0YC/Mdq4HtxrYEWW3xH+veYBDzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67e71b5a-cf09-4d6c-a104-194832854d33",
                            TwoFactorEnabled = false,
                            UserName = "Jeremy"
                        },
                        new
                        {
                            Id = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56e33f95-64f4-4cfa-a019-5adbc2cb6c15",
                            Email = "sean@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEHcOHTCCfqg5mr/YbTShFJy+1/lYXIna74sqH+u8d/3jLDWjgqoHE5mFvnjnHIaZYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddd9a983-eccb-4009-ad8e-912eb388bcc2",
                            TwoFactorEnabled = false,
                            UserName = "Sean"
                        },
                        new
                        {
                            Id = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f7ceff1-886d-47a7-8154-bcbd5e113910",
                            Email = "rick@gmail.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELDRv+5zTX7q6qPXOlBnwTBl5P3WtVLdxSnHG4EI/3TzowTkzGCHioFWViSebIBo5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d26cad1-ae8a-4330-b80f-07f816ab31ad",
                            TwoFactorEnabled = false,
                            UserName = "Rick"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTimePlaced")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TableNumber")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TipAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DriverId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTimePlaced = new DateTime(2023, 9, 26, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            TableNumber = 3,
                            TipAmount = 6.80m
                        },
                        new
                        {
                            Id = 2,
                            DateTimePlaced = new DateTime(2023, 9, 16, 14, 25, 22, 0, DateTimeKind.Unspecified),
                            DriverId = 3,
                            EmployeeId = 2,
                            TipAmount = 11m
                        },
                        new
                        {
                            Id = 3,
                            DateTimePlaced = new DateTime(2023, 9, 27, 12, 4, 35, 0, DateTimeKind.Unspecified),
                            EmployeeId = 3,
                            TableNumber = 4
                        },
                        new
                        {
                            Id = 4,
                            DateTimePlaced = new DateTime(2023, 9, 28, 12, 4, 11, 0, DateTimeKind.Unspecified),
                            DriverId = 3,
                            EmployeeId = 4,
                            TipAmount = 8.75m
                        },
                        new
                        {
                            Id = 5,
                            DateTimePlaced = new DateTime(2023, 9, 28, 13, 48, 37, 0, DateTimeKind.Unspecified),
                            DriverId = 3,
                            EmployeeId = 3,
                            TipAmount = 4.95m
                        },
                        new
                        {
                            Id = 6,
                            DateTimePlaced = new DateTime(2023, 9, 28, 15, 22, 58, 0, DateTimeKind.Unspecified),
                            EmployeeId = 4,
                            TableNumber = 1,
                            TipAmount = 12m
                        },
                        new
                        {
                            Id = 7,
                            DateTimePlaced = new DateTime(2023, 9, 29, 11, 7, 47, 0, DateTimeKind.Unspecified),
                            EmployeeId = 2,
                            TableNumber = 2
                        },
                        new
                        {
                            Id = 8,
                            DateTimePlaced = new DateTime(2023, 9, 29, 12, 34, 51, 0, DateTimeKind.Unspecified),
                            DriverId = 3,
                            EmployeeId = 3,
                            TipAmount = 8.55m
                        },
                        new
                        {
                            Id = 9,
                            DateTimePlaced = new DateTime(2023, 9, 29, 14, 41, 8, 0, DateTimeKind.Unspecified),
                            DriverId = 3,
                            EmployeeId = 2,
                            TipAmount = 6.39m
                        });
                });

            modelBuilder.Entity("Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CheeseId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("SauceId")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheeseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SauceId");

                    b.HasIndex("SizeId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheeseId = 1,
                            OrderId = 1,
                            SauceId = 1,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 2,
                            CheeseId = 2,
                            OrderId = 2,
                            SauceId = 2,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CheeseId = 3,
                            OrderId = 2,
                            SauceId = 3,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 4,
                            CheeseId = 4,
                            OrderId = 3,
                            SauceId = 4,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 5,
                            CheeseId = 2,
                            OrderId = 4,
                            SauceId = 2,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 6,
                            CheeseId = 2,
                            OrderId = 4,
                            SauceId = 4,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 7,
                            CheeseId = 1,
                            OrderId = 5,
                            SauceId = 3,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 8,
                            CheeseId = 3,
                            OrderId = 6,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 9,
                            CheeseId = 4,
                            OrderId = 6,
                            SauceId = 4,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 10,
                            CheeseId = 3,
                            OrderId = 6,
                            SauceId = 1,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 11,
                            CheeseId = 2,
                            OrderId = 7,
                            SauceId = 1,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 12,
                            CheeseId = 1,
                            OrderId = 8,
                            SauceId = 2,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 13,
                            CheeseId = 1,
                            OrderId = 8,
                            SauceId = 3,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 14,
                            CheeseId = 1,
                            OrderId = 9,
                            SauceId = 3,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 15,
                            CheeseId = 2,
                            OrderId = 9,
                            SauceId = 1,
                            SizeId = 3
                        });
                });

            modelBuilder.Entity("PizzaTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PizzaId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ToppingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaToppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PizzaId = 1,
                            Quantity = 8,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 2,
                            PizzaId = 1,
                            Quantity = 8,
                            ToppingId = 8
                        },
                        new
                        {
                            Id = 3,
                            PizzaId = 1,
                            Quantity = 8,
                            ToppingId = 5
                        },
                        new
                        {
                            Id = 4,
                            PizzaId = 2,
                            Quantity = 10,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 5,
                            PizzaId = 3,
                            Quantity = 11,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 6,
                            PizzaId = 3,
                            Quantity = 7,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 7,
                            PizzaId = 4,
                            Quantity = 9,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 8,
                            PizzaId = 5,
                            Quantity = 12,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 9,
                            PizzaId = 5,
                            Quantity = 15,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 10,
                            PizzaId = 5,
                            Quantity = 7,
                            ToppingId = 5
                        },
                        new
                        {
                            Id = 11,
                            PizzaId = 6,
                            Quantity = 7,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 12,
                            PizzaId = 6,
                            Quantity = 4,
                            ToppingId = 7
                        },
                        new
                        {
                            Id = 13,
                            PizzaId = 7,
                            Quantity = 10,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 14,
                            PizzaId = 8,
                            Quantity = 11,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 15,
                            PizzaId = 9,
                            Quantity = 12,
                            ToppingId = 8
                        },
                        new
                        {
                            Id = 16,
                            PizzaId = 9,
                            Quantity = 10,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 17,
                            PizzaId = 10,
                            Quantity = 5,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 18,
                            PizzaId = 11,
                            Quantity = 6,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 19,
                            PizzaId = 11,
                            Quantity = 8,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 20,
                            PizzaId = 11,
                            Quantity = 7,
                            ToppingId = 6
                        },
                        new
                        {
                            Id = 21,
                            PizzaId = 12,
                            Quantity = 8,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 22,
                            PizzaId = 12,
                            Quantity = 9,
                            ToppingId = 5
                        },
                        new
                        {
                            Id = 23,
                            PizzaId = 13,
                            Quantity = 10,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 24,
                            PizzaId = 14,
                            Quantity = 10,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 25,
                            PizzaId = 15,
                            Quantity = 7,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 26,
                            PizzaId = 15,
                            Quantity = 8,
                            ToppingId = 3
                        });
                });

            modelBuilder.Entity("Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Marinara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arrabbiata"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Garlic White"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None (sauceless)"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "555 Ocean Avenue",
                            FirstName = "Courtney",
                            IdentityUserId = "f2498ab4-e4b6-4e61-92c0-9568e96a8145",
                            LastName = "Gulledge"
                        },
                        new
                        {
                            Id = 3,
                            Address = "555 Ocean Avenue",
                            FirstName = "Jeremy",
                            IdentityUserId = "d9b5145a-739c-42d3-9e94-d2d439063d7e",
                            LastName = "Gibeault"
                        },
                        new
                        {
                            Id = 4,
                            Address = "555 Ocean Avenue",
                            FirstName = "Sean",
                            IdentityUserId = "a7bc4dd9-8f10-4e24-8c0c-ef09a24ec9a5",
                            LastName = "Gulledge"
                        },
                        new
                        {
                            Id = 5,
                            Address = "555 Ocean Avenue",
                            FirstName = "Rick",
                            IdentityUserId = "6a2f5d0b-3eac-4dab-ae9d-7f26d77e4a8c",
                            LastName = "Gibeault"
                        });
                });

            modelBuilder.Entity("Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SizeCost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Small",
                            SizeCost = 10.00m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium",
                            SizeCost = 12.00m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Large",
                            SizeCost = 15.00m
                        });
                });

            modelBuilder.Entity("Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sausage"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pepperoni"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mushroom"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Onion"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green Pepper"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Black Olive"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Basil"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Extra Cheese"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("ShepherdsPies.Models.UserProfile", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");

                    b.HasOne("ShepherdsPies.Models.UserProfile", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Pizza", b =>
                {
                    b.HasOne("Cheese", "Cheese")
                        .WithMany()
                        .HasForeignKey("CheeseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order", "Order")
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sauce", "Sauce")
                        .WithMany()
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheese");

                    b.Navigation("Order");

                    b.Navigation("Sauce");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("PizzaTopping", b =>
                {
                    b.HasOne("Pizza", "Pizza")
                        .WithMany("PizzaToppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pizza");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("Pizzas");
                });

            modelBuilder.Entity("Pizza", b =>
                {
                    b.Navigation("PizzaToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
